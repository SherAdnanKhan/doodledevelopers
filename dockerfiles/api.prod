FROM php:7.4-fpm


# Arguments defined in docker-compose.yml
ARG user=sammy
ARG uid=1000

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    libjpeg-dev \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    zip \
    unzip \
    imagemagick \
    libmagickwand-dev \
    nginx \
    procps \
    nano \
    jpegoptim \
    optipng \
    pngquant

# Clear cache
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

# Configure GD extension
RUN docker-php-ext-configure gd --enable-gd --with-jpeg

# Install PHP extensions
RUN docker-php-ext-install pdo_mysql mbstring exif pcntl bcmath gd

# Install imagik for php
RUN printf "\n" | pecl install imagick
RUN docker-php-ext-enable imagick


#
# Setup NGINX since this is a single container model
#
COPY ./docker-compose/nginx/prod/default.conf /etc/nginx/sites-enabled/default
COPY ./docker-compose/entrypoint/entrypoint.sh /etc/entrypoint.sh

# Get latest Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Create system user to run Composer and Artisan Commands
RUN useradd -G www-data,root -u $uid -d /home/$user $user
RUN mkdir -p /home/$user/.composer && \
    chown -R $user:$user /home/$user

# Set working directory
WORKDIR /var/www

# copy all code from src/ into /var/www/
COPY ./src/ /var/www/
# move in the production env file
RUN mv env.prod .env
# Remove any .sql files
RUN rm *.sql

# set the permissions on everything to www-data so nginx can operate it.
RUN chown -R www-data.www-data /var/www/*


# Run composer
RUN /usr/bin/composer install

#USER $user

EXPOSE 80

ENTRYPOINT ["sh","/etc/entrypoint.sh"]
